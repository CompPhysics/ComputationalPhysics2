TITLE: Introduction to  Computational Physics Lectures, FYS4411/9411
AUTHOR: Morten Hjorth-Jensen {copyright, 1999-present|CC BY-NC} Email morten.hjorth-jensen@fys.uio.no at Department of Physics, University of Oslo & Department of Physics and Astronomy and National Superconducting Cyclotron Laboratory, Michigan State University
DATE: today


!split
===== Aims =====
!bblock
* Be able to apply two central many-particle methods like the Variational Monte Carlo method to properties of many-fermion systems and many-boson systems.
* Understand how to simulate quantum mechanical systems with many interacting particles. The methods are relevant for atomic, molecular, solid state, materials science, nanotechnology, quantum chemistry  and nuclear physics. 

!eblock



!split
===== Lectures and ComputerLab =====

!bblock
  * Lectures: Thursday (2.15pm-4pm), remotely. First time January 18.
  * Computerlab: Thursday (4.15pm-7pm), first time January 18, last lab session May 10.
  * Weekly plans and all other information are on the webpage
  * Intensive week starts March 5 and ends March 8, week 10.
  * _First project to be handed in March 16_.
  * _Second and final project to be handed in June 1._
  * There is no final exam, only project work.
!eblock

!split
===== Course Format =====

!bblock
  * Two  compulsory projects. Electronic reports only. You are free to choose your format.
  * Evaluation and grading: The two  projects count 1/2 each of the final mark. No exam.
  * The computer lab (room FV329) consists of 16 Linux PCs, but many prefer own laptops. C/C++ is the default programming language, but Fortran2008 and Python are also used. All source codes discussed during the lectures can be found at the webpage of the course. We recommend either C/C++, Fortran2008 or Python as programming languages.
!eblock


!split
===== Topics covered in this course =====
!bblock
  * Parallelization (MPI and OpenMP), high-performance computing topics. Choose between Fortran2008 and/or C++ as programming languages. Python also possible as programming language. 
  * Algorithms for Monte Carlo Simulations (multidimensional integrals), Metropolis-Hastings and importance sampling algorithms.  Improved Monte Carlo methods.
  * Statistical analysis of data  from Monte Carlo calculations, blocking method. 
  * Eigenvalue solvers
  * For project 2 there will be three variants:
    o Variational Monte Carlo for fermions
    o Coupled cluster theory for fermions (iterative methods)
    o Neural networks and Machine Learning to solve the same problems as in project 1  
!eblock

!split
===== Topics covered in this course =====
!bblock
  * Search for minima in multidimensional spaces (conjugate gradient method, steepest descent method, quasi-Newton-Raphson, Broyden-Jacobian).
  * Iterative methods for solutions of non-linear equations.
  * Object orientation
  * Data analysis and resampling techniques
  * Variational Monte Carlo (VMC) for 'ab initio' studies of quantum mechanical many-body systems.
  * Simulation of two-dimensional systems like quantum dots (project 2).
  * Simulation of trapped bosons using VMC (project 1)
  * Machine learning and neural networks (project 2)
  * Coupled cluster theory (project 2)
!eblock



!split
===== Quantum Monte Carlo Motivation =====
!bblock
Most quantum mechanical  problems of interest in for example atomic, molecular, nuclear and solid state 
physics consist of a large number of interacting electrons and ions or nucleons. 

The total number of particles $N$ is usually sufficiently large
that an exact solution cannot be found. 

Typically, 
the expectation value for a chosen hamiltonian for a system of  $N$ particles is
!bt
\[
   \langle H \rangle =
   \frac{\int d\bm{R}_1d\bm{R}_2\dots d\bm{R}_N
         \Psi^{\ast}(\bm{R_1},\bm{R}_2,\dots,\bm{R}_N)
          H(\bm{R_1},\bm{R}_2,\dots,\bm{R}_N)
          \Psi(\bm{R_1},\bm{R}_2,\dots,\bm{R}_N)}
        {\int d\bm{R}_1d\bm{R}_2\dots d\bm{R}_N
        \Psi^{\ast}(\bm{R_1},\bm{R}_2,\dots,\bm{R}_N)
        \Psi(\bm{R_1},\bm{R}_2,\dots,\bm{R}_N)},
\]
!et
an in general intractable problem.

 This integral is actually the starting point in a Variational Monte Carlo calculation. _Gaussian quadrature: Forget it_! Given 10 particles and 10 mesh points for each degree of freedom
and an
 ideal 1 Tflops machine (all operations take the same time), how long will it take to compute the above integral? The lifetime of the universe is of the order of $10^{17}$ s.
!eblock


!split
===== Quantum Monte Carlo Motivation =====
!bblock
As an example from the nuclear many-body problem, we have Schroedinger's equation as a differential equation
!bt
\[
  \hat{H}\Psi(\bm{r}_1,..,\bm{r}_A,\alpha_1,..,\alpha_A)=E\Psi(\bm{r}_1,..,\bm{r}_A,\alpha_1,..,\alpha_A)
\]
!et
where
!bt
\[
  \bm{r}_1,..,\bm{r}_A,
\]
!et
are the coordinates and 
!bt
\[
  \alpha_1,..,\alpha_A,
\]
!et
are sets of relevant quantum numbers such as spin and isospin for a system of  $A$ nucleons ($A=N+Z$, $N$ being the number of neutrons and $Z$ the number of protons).
!eblock


!split
===== Quantum Monte Carlo Motivation =====
!bblock
There are
!bt
\[
 2^A\times \left(\begin{array}{c} A\\ Z\end{array}\right)
\]
!et
coupled second-order differential equations in $3A$ dimensions.

For a nucleus like beryllium-10 this number is _215040_.
This is a truely challenging many-body problem.

Methods like partial differential equations can at most be used for 2-3 particles.
!eblock


!split
===== Various many-body methods =====
!bblock
* Monte-Carlo methods
* Renormalization group (RG) methods, in particular density matrix RG
* Large-scale diagonalization (Iterative methods, Lanczo's method, dimensionalities  $10^{10}$ states)
* Coupled cluster theory, favoured method in quantum chemistry, molecular and atomic physics. Applications to ab initio calculations in nuclear physics as well for large nuclei.
* Perturbative many-body methods 
* Green's function methods
* Density functional theory/Mean-field theory and Hartree-Fock theory

The physics of the system hints at which many-body methods to use.
!eblock



!split
===== Quantum Monte Carlo Motivation =====
!bblock Pros and Cons of Monte Carlo
* Is physically intuitive.
* Allows one to study systems with many degrees of freedom. Diffusion Monte Carlo (DMC) and Green's function Monte Carlo (GFMC) yield in principle the exact solution to Schroedinger's equation.
* Variational Monte Carlo (VMC) is easy  to implement but needs a reliable trial wave function, can be difficult to obtain.  This is where we will use Hartree-Fock theory to construct an optimal basis.
* DMC/GFMC for fermions (spin with half-integer values, electrons, baryons, neutrinos, quarks)  has a sign problem. Nature prefers an anti-symmetric wave function. PDF in this case given distribution of random walkers ($p\ge 0$).
* The solution has a statistical error, which can be large. 
* There is a limit for how large systems one can study, DMC needs a huge number of random walkers in order to achieve stable results. 
* Obtain only the lowest-lying states with a given symmetry. Can get excited states.
!eblock



!split
===== Quantum Monte Carlo Motivation =====
!bblock Where and why do we use Monte Carlo Methods in Quantum Physics
* Quantum systems with many particles at finite temperature: Path Integral Monte Carlo with applications to dense matter and quantum liquids (phase transitions from normal fluid to superfluid). Strong correlations.
* Bose-Einstein condensation of dilute gases, method transition from  non-linear PDE to Diffusion Monte Carlo as density increases.
* Light atoms, molecules, solids and nuclei. 
* Lattice Quantum-Chromo Dynamics. Impossible to solve without MC calculations. 
* Simulations of systems in solid state physics, from semiconductors to spin systems. Many electrons active and possibly strong correlations.
!eblock

